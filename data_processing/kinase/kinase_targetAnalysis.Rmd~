---
title: "KinaseInhibitorTargets_analysis"
author: "Oana Ursu"
date: "December 4, 2015"
output: html_document
---

Produces Figure 1C, 1D
====

```{r}
require(reshape2)
require(pheatmap)

#Change DATADIR to where you downloaded the supplement
DATADIR='/nfs/vendata/oursu/oana/GemPaper_2015-12-07'
```

```{r}
FIG_OUT=paste(DATADIR,'/results/data_processing/kinase/',sep='')
system(paste('mkdir',FIG_OUT))
KI_NAMES=paste(DATADIR,'/data/kinase/Table.S1.2.KI_names.txt',sep='')
KINASE_HITS=paste(DATADIR,'/results/data_processing/kinase/Table.S1.4.KinaseScreen_Hits.txt',sep='')
KINASE_TARGETS=paste(DATADIR,'/data/kinase/Table.S1.3.KinaseTargets.txt',sep='')
GENETIC_ANALYSIS=paste(DATADIR,'/data/genetic/Table.S2.1.GeneticHitsProcessedData.txt',sep='')
DE_FILE=paste(DATADIR,'/data/RNAseq/Table.S3.1.Cuffdiff_protein_coding_V23_vs_G23_gene_exp.diff',sep='')
FPKMmin=0.1
KINASE_THRESHOLD=50
KINASE_PHEN=paste(DATADIR,'/results/data_processing/kinase/KinaseTargets_for_phen_thresholdActivityReduction',KINASE_THRESHOLD,'.phen',sep='')
```

Read in files.

```{r}
#Kinase files
kinase.data=read.table(KINASE_TARGETS,header=TRUE,sep='\t')
kinase.data=kinase.data[-which(is.na(kinase.data$percent_activity)),]
dim(kinase.data)
#Genetic hits files
genetic.data=read.table(GENETIC_ANALYSIS,header=TRUE)[,c('TraslatedGeneSymbol',
                                                         'ratio','FDR','controlStatus')]
#also read a table of expressed genes (for filtering)
de_data=read.table(DE_FILE,header=TRUE)
expressed_genes=de_data[union(which(de_data$value_1>=FPKMmin),which(de_data$value_2>=FPKMmin)),'gene']

#Convert kinase data to genetic names as well.
#Loop through kinase data and get corresponding genetic hit
kinase.data=data.frame(kinase.data,siRNAscreen.SI=NA)
unique_kinases=unique(kinase.data$target_kinase)
genetic.genes=as.character(genetic.data$TraslatedGeneSymbol)
for (kinase in unique_kinases){
  kinase_items=strsplit(kinase,'/')[[1]]
  correspondingGene=c()
  for (kinase_item in kinase_items){
    new_item=which(genetic.genes==kinase_item)
    if (length(new_item)>0){
      correspondingGene=c(correspondingGene,new_item) 
    }
  }
  if (length(correspondingGene)>0){
    kinase.data[which(as.character(kinase.data$target_kinase)==kinase),
                        'siRNAscreen.SI']=max(abs(1-as.numeric(as.character(genetic.data[correspondingGene,'ratio']))),na.rm=TRUE)
  }
}
```

Targets of gemcitabine synergizers.
----

Get the synergizer drugs.

```{r}
KI_dict=read.table(KI_NAMES,header=TRUE,sep='\t')
KI_dict[,'Ki_name']=gsub('/','.',gsub(' ','.',gsub(',','.',gsub('-','.',KI_dict[,'Ki_name']))))
rownames(KI_dict)=KI_dict[,'KI']
synergizer_ids=as.character(unique(read.table(KINASE_HITS,header=TRUE,sep='\t')[,'KI']))
synergizers=as.character(KI_dict[synergizer_ids,'Ki_name'])
synergy_rows=which(as.character(kinase.data$kinase_inhibitor) %in% synergizers)
print(synergizers) 
```

Make a heatmap of targets x synergizers. Note that for some pairs, data are missing. The data are missing from the original paper, it is not a bug in this code (http://www.nature.com/nbt/journal/v29/n11/full/nbt.2017.html)

```{r}
synergizer.data=kinase.data[synergy_rows,]
kinase.data[,1]=as.character(kinase.data[,1])
kinh.target.full=acast(kinase.data,
                  target_kinase~kinase_inhibitor,fun.aggregate=min,value.var='percent_activity',fill=1000)
kinh.target=acast(synergizer.data,
                  target_kinase~kinase_inhibitor,value.var='percent_activity')
get_optimal_ordering=function(m){
  require(cba)
  d <- dist(as.matrix(m))
  hc <- hclust(d)
  co <- order.optimal(d, hc$merge)
  m.optimalRows=as.matrix(m)[co$order,]
  d <- dist(as.matrix(t(m)))
  hc <- hclust(d)
  co <- order.optimal(d, hc$merge)
  m.optimal=m.optimalRows[,co$order]
  return(m.optimal)
}
pheatmap(get_optimal_ordering(t(kinh.target)),cluster_cols=FALSE,cluster_rows=FALSE,
         show_colnames=FALSE)

#plot for the figure
pdf(paste(FIG_OUT,'KinaseHitHeatmap.pdf',sep=''),height=4,width=6)
pheatmap(get_optimal_ordering(t(kinh.target)),cluster_cols=FALSE,cluster_rows=FALSE,
         show_colnames=FALSE)
dev.off()
```

Now, make a histogram of targets per kinase inhibitor, for the whole data vs for the synergizer kinase inhibitors.

```{r}
activity_threshold=50
kinh.data.withBinary=kinase.data[which(as.numeric(as.character(kinase.data$percent_activity))<=activity_threshold),]
entries=unique(kinase.data[,1])
targets.perInh=rep(0,length(entries))
names(targets.perInh)=entries
targets.perInhCounts=table(kinh.data.withBinary[,'kinase_inhibitor'])
targets.perInh[names(targets.perInhCounts)]=targets.perInhCounts
pdf(paste(FIG_OUT,'InhibitorsPerKinase.pdf',sep=''))
par(mfrow=c(2,1))
hist(targets.perInh,breaks=100,xlim=c(0,250),xlab='Targets per inhibitor',main='Targets per kinase inhibitor \n (all)')
hist(targets.perInh[synergizers],breaks=100,xlab='Targets per inhibitor',xlim=c(0,250),main='Targets per inhibitor \n(gemcitabine synergizers)')
dev.off()

expressed_kinase_hits2=c()
unique_kinaseHits2=unique(kinase.data[,'target_kinase'])
for (kinase in unique_kinaseHits2){
  kinase_items=strsplit(kinase,'/')[[1]]
  for (kinase_item in kinase_items){
    if (kinase_item %in% expressed_genes){
      expressed_kinase_hits2=c(expressed_kinase_hits2,kinase)
    }
  } 
}
kinh.data.withBinary=kinase.data[intersect(which(as.numeric(as.character(kinase.data$percent_activity))<=activity_threshold),which(kinase.data$target_kinase %in% expressed_kinase_hits2)),]
entries=unique(kinase.data[,1])
targets.perInh=rep(0,length(entries))
names(targets.perInh)=entries
targets.perInhCounts=table(kinh.data.withBinary[,'kinase_inhibitor'])
targets.perInh[names(targets.perInhCounts)]=targets.perInhCounts
pdf(paste(FIG_OUT,'InhibitorsPerKinase_expressed.pdf',sep=''),height=8,width=4)
par(mfrow=c(2,1))
hist(targets.perInh,breaks=100,xlim=c(0,160),xlab='Targets per inhibitor',main='Targets per kinase inhibitor \n (all)')
hist(targets.perInh[synergizers],breaks=100,xlab='Targets per inhibitor',xlim=c(0,160),main='Targets per inhibitor \n(gemcitabine synergizers)')
dev.off()
pdf(paste(FIG_OUT,'InhibitorsPerKinase_expressedECDF.pdf',sep=''),height=4,width=4)
plot(ecdf(targets.perInh),main='ECDF Targets per kinase inhibitor\n Anastassiadis et al., 2011 ',xlab='Targets per kinase inhibitor',ylab='ECDF')
abline(v=2,col='blue')
dev.off()
```

Prepare a list of targets with associated values for the network input

```{r}
phendata=data.frame(target=character(),value=double())
for (target in rownames(kinh.target)){
  print(kinh.target[target,])
  val=min(kinh.target[target,],na.rm=TRUE)
  if (val<=KINASE_THRESHOLD){
    phendata=rbind(phendata,data.frame(target=target,value=100-val))
  }
} 
write.table(phendata,file=KINASE_PHEN,sep='\t',quote=F,row.names=F,col.names=F)
```


Compare the kinase data with the genetic data
===

```{r}
expressed_kinase_hits=c()
unique_kinaseHits=unique(synergizer.data[which(synergizer.data$target_passes_threshold),'target_kinase'])
for (kinase in unique_kinaseHits){
  kinase_items=strsplit(kinase,'/')[[1]]
  for (kinase_item in kinase_items){
    if (kinase_item %in% expressed_genes){
      expressed_kinase_hits=c(expressed_kinase_hits,kinase)
    }
  } 
}
```

There are `r length(unique(expressed_kinase_hits))` kinase hits.
Keep only synergizer kinase inhibitors, get per gene best % activity reduced. Plot this best activity reduction vs abs(SI-1).

```{r}
synergizer.aggregated=aggregate(synergizer.data[,c('percent_activity','siRNAscreen.SI')],list(ceva=synergizer.data$target_kinase),min)
plot((100-synergizer.aggregated$percent_activity),
     synergizer.aggregated$siRNAscreen.SI,
     xlab='Percent activity reduction by kinase inhibitor',
  ylab='Sensitivity index deviation from 1',cex.lab=1.5,cex.axis=1.5)
abline(v=50,col='purple',lty=2)
abline(h=0.3,col='blue',lty=2)

#plot for the figure
pdf(paste(FIG_OUT,'KinaseVsGenetics.pdf',sep=''),height=6,width=6)
plot((100-synergizer.aggregated$percent_activity),
     synergizer.aggregated$siRNAscreen.SI,
     xlab='Percent activity reduction by kinase inhibitor',
  ylab='Sensitivity index deviation from 1',cex.lab=1.5,cex.axis=1.5)
abline(v=50,col='purple',lty=2)
abline(h=0.3,col='blue',lty=2)
dev.off()

```
